{"version":3,"sources":["webpack:///./projects/angular-autobot/src/lib/angular-autobot-animations.ts","webpack:///./projects/angular-autobot/src/lib/angular-autobot-initializer.ts","webpack:///./projects/angular-autobot/src/lib/angular-autobot.module.ts","webpack:///./projects/angular-autobot/src/lib/angular-autobot.service.ts","webpack:///./projects/angular-autobot/src/lib/components/action/abstract-action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/action/action.component.css","webpack:///./projects/angular-autobot/src/lib/components/action/action.component.html","webpack:///./projects/angular-autobot/src/lib/components/action/action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/action/button-action/button-action.component.css","webpack:///./projects/angular-autobot/src/lib/components/action/button-action/button-action.component.html","webpack:///./projects/angular-autobot/src/lib/components/action/button-action/button-action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/action/input-action/input-action.component.css","webpack:///./projects/angular-autobot/src/lib/components/action/input-action/input-action.component.html","webpack:///./projects/angular-autobot/src/lib/components/action/input-action/input-action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/action/input-button-action/input-button-action.component.css","webpack:///./projects/angular-autobot/src/lib/components/action/input-button-action/input-button-action.component.html","webpack:///./projects/angular-autobot/src/lib/components/action/input-button-action/input-button-action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/action/select-action/select-action.component.css","webpack:///./projects/angular-autobot/src/lib/components/action/select-action/select-action.component.html","webpack:///./projects/angular-autobot/src/lib/components/action/select-action/select-action.component.ts","webpack:///./projects/angular-autobot/src/lib/components/chatbot/autobot-chat.component.html","webpack:///./projects/angular-autobot/src/lib/components/chatbot/autobot-chat.component.ts","webpack:///./projects/angular-autobot/src/lib/components/message/embed-message/embed-message.component.css","webpack:///./projects/angular-autobot/src/lib/components/message/embed-message/embed-message.component.html","webpack:///./projects/angular-autobot/src/lib/components/message/embed-message/embed-message.component.ts","webpack:///./projects/angular-autobot/src/lib/components/message/message.component.css","webpack:///./projects/angular-autobot/src/lib/components/message/message.component.html","webpack:///./projects/angular-autobot/src/lib/components/message/message.component.ts","webpack:///./projects/angular-autobot/src/lib/components/message/text-message/text-message.component.css","webpack:///./projects/angular-autobot/src/lib/components/message/text-message/text-message.component.html","webpack:///./projects/angular-autobot/src/lib/components/message/text-message/text-message.component.ts","webpack:///./projects/angular-autobot/src/lib/core/autobot-manager.factory.service.ts","webpack:///./projects/angular-autobot/src/lib/core/autobot-manager.ts","webpack:///./projects/angular-autobot/src/lib/core/autobot-message-factory.service.ts","webpack:///./projects/angular-autobot/src/lib/directives/autobot-focus.directive.ts","webpack:///./projects/angular-autobot/src/lib/directives/autobot-markdown.directive.ts","webpack:///./projects/angular-autobot/src/lib/directives/autobot-scroll.directive.ts","webpack:///./projects/angular-autobot/src/lib/store/reducers.ts","webpack:///./projects/angular-autobot/src/public_api.ts","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { trigger, transition, style, animate } from '@angular/animations';\n\nexport function getSlideFadeAnim() {\n  return trigger('slideFadeAnimation', [\n    transition(':enter', [\n      style({ transform: 'translateX(-10px)', opacity: 0 }),\n      animate('300ms', style({ transform: 'translateX(0)', opacity: 1 }))\n    ]),\n    transition(':leave', [\n      style({ transform: 'translateX(0)', opacity: 1 }),\n      animate('300ms', style({ transform: 'translateX(-10px)', opacity: 0 }))\n    ])\n  ]);\n}\n","import { AutobotMessageFactory, InbuiltMessageTypes } from './core/autobot-message-factory.service';\nimport { TextMessageComponent } from './components/message/text-message/text-message.component';\n\nexport function onAppInit(autobotMessageFactory: AutobotMessageFactory) {\n  return () => {\n    autobotMessageFactory.registerComponent(InbuiltMessageTypes.TEXT, TextMessageComponent);\n    autobotMessageFactory.registerComponent(InbuiltMessageTypes.EMBED, TextMessageComponent);\n  };\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { StoreModule } from '@ngrx/store';\n\nimport { AutobotChatComponent } from './components/chatbot/autobot-chat.component';\nimport { AngularAutobotService } from './angular-autobot.service';\n\nimport { AutobotScrollDirective } from './directives/autobot-scroll.directive';\nimport { AutobotMarkdownDirective } from './directives/autobot-markdown.directive';\nimport { AutobotFocusDirective } from './directives/autobot-focus.directive';\nimport { TextMessageComponent } from './components/message/text-message/text-message.component';\nimport { EmbedMessageComponent } from './components/message/embed-message/embed-message.component';\nimport { MessageComponent } from './components/message/message.component';\nimport { ActionComponent } from './components/action/action.component';\nimport { SelectActionComponent } from './components/action/select-action/select-action.component';\nimport { ButtonActionComponent } from './components/action/button-action/button-action.component';\nimport { InputButtonActionComponent } from './components/action/input-button-action/input-button-action.component';\nimport { InputActionComponent } from './components/action/input-action/input-action.component';\n\nimport { autobotStateReducer } from './store/reducers';\nimport { AutobotMessageFactory } from './core/autobot-message-factory.service';\nimport { onAppInit } from './angular-autobot-initializer';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    StoreModule.forRoot({ autobot: autobotStateReducer }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 1000 // Retains last 25 states\n    })\n  ],\n  declarations: [\n    AutobotChatComponent,\n    AutobotScrollDirective,\n    AutobotMarkdownDirective,\n    AutobotFocusDirective,\n    TextMessageComponent,\n    EmbedMessageComponent,\n    MessageComponent,\n    ActionComponent,\n    SelectActionComponent,\n    ButtonActionComponent,\n    InputButtonActionComponent,\n    InputActionComponent\n  ],\n  entryComponents: [TextMessageComponent, EmbedMessageComponent],\n  exports: [AutobotChatComponent],\n  providers: [\n    AngularAutobotService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: onAppInit,\n      multi: true,\n      deps: [AutobotMessageFactory]\n    }\n  ]\n})\nexport class AngularAutobotModule {}\n","import { Injectable } from '@angular/core';\nimport { AutobotManagerFactory } from './core/autobot-manager.factory.service';\nimport { AutobotManager } from './core/autobot-manager';\nimport { AutobotMessageFactory } from './core/autobot-message-factory.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularAutobotService {\n  constructor(\n    private botManagerFactory: AutobotManagerFactory,\n    private autobotMessageFactory: AutobotMessageFactory\n  ) {}\n\n  bot(botId): AutobotManager {\n    return this.botManagerFactory.getManager(botId);\n  }\n\n  registerComponent(compName: string, component: any) {\n    this.autobotMessageFactory.registerComponent(compName, component);\n  }\n}\n","import { Input } from '@angular/core';\nimport { Action } from '../../models';\n\nexport class AbstractActionComponent {\n  @Input() action: Action;\n  @Input() resolver: (any) => void;\n\n  constructor() {}\n}\n","module.exports = \"\"","module.exports = \"<div [@slideFadeAnimation] libAutobotScroll>\\n  <ng-container [ngSwitch]=\\\"(action | async).type\\\">\\n    <lib-input-action *ngSwitchCase=\\\"'text'\\\" [action]=\\\"(action | async)\\\" [resolver]=\\\"resolver\\\"></lib-input-action>\\n    <!-- <lib-select-action *ngSwitchCase=\\\"'select'\\\" [action]=\\\"(action | async)\\\" [resolver]=\\\"resolver\\\"></lib-select-action> -->\\n    <lib-button-action *ngSwitchCase=\\\"'button'\\\" [action]=\\\"(action | async)\\\" [resolver]=\\\"resolver\\\"></lib-button-action>\\n    <!-- <lib-input-button-action *ngSwitchCase=\\\"'buttontext'\\\" [action]=\\\"(action | async)\\\" [resolver]=\\\"resolver\\\"></lib-input-button-action> -->\\n    <span *ngSwitchDefault>Unknown Message Type</span>\\n  </ng-container>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Action } from '../../models';\nimport { trigger, transition, style, animate } from '@angular/animations';\n\n\n// TODO Do i really need this?\nexport interface IActionComponent {\n  handleActionResult: (any) => void;\n}\n\n@Component({\n  selector: 'lib-action',\n  templateUrl: './action.component.html',\n  styleUrls: ['./action.component.css'],\n  animations: [\n    trigger(\n      'slideFadeAnimation', [\n        transition(':enter', [\n          style({ transform: 'translateX(-10px)', opacity: 0 }),\n          animate('300ms', style({ transform: 'translateX(0)', opacity: 1 }))\n        ]),\n        transition(':leave', [\n          style({ transform: 'translateX(0)', opacity: 1 }),\n          animate('300ms', style({ transform: 'translateX(-10px)', opacity: 0 }))\n        ])\n      ]\n    )\n  ],\n})\nexport class ActionComponent implements OnInit {\n\n  @Input() action: Action;\n  @Input() resolver: (any) => void;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"botui-actions-buttons\\\">\\n  <button type=\\\"button\\\" *ngFor=\\\"let item of action.actionData.items\\\" class=\\\"botui-actions-buttons-button {{item.cssClass}}\\\"\\n    (click)=\\\"itemClicked(item)\\\" autofocus>\\n    <i *ngIf=\\\"item.icon\\\" class=\\\"botui-icon botui-action-button-icon fa {{'fa-' + item.icon}}\\\"></i>\\n    {{item.text}}\\n  </button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractActionComponent } from '../abstract-action.component';\n\n@Component({\n  selector: 'lib-button-action',\n  templateUrl: './button-action.component.html',\n  styleUrls: ['./button-action.component.css']\n})\nexport class ButtonActionComponent extends AbstractActionComponent implements OnInit {\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {}\n\n  itemClicked(item) {\n    this.resolver(item);\n  }\n\n  // handleActionResult(button) {\n  //   this._handleAction(button.text);\n  //   var defaultActionObj = {\n  //     type: 'button',\n  //     text: button.text,\n  //     value: button.value\n  //   };\n\n  //   for (var eachProperty in button) {\n  //     if (button.hasOwnProperty(eachProperty)) {\n  //       if (eachProperty !== 'type' && eachProperty !== 'text' && eachProperty !== 'value') {\n  //         defaultActionObj[eachProperty] = button[eachProperty];\n  //       }\n  //     }\n  //   }\n\n  //   this._actionResolve(defaultActionObj);\n  // }\n}\n","module.exports = \"\"","module.exports = \"<form class=\\\"botui-actions-text\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <!-- <i *ngIf=\\\"action.text.icon\\\" class=\\\"botui-icon botui-action-text-icon fa {{'fa-' + action.text.icon}}\\\"></i>\\n  <input type=\\\"text\\\" ref=\\\"input\\\" name=\\\"text-action-input\\\" [type]=\\\"action.text.sub_type\\\" [(ngModel)]=\\\"action.text.value\\\" class=\\\"botui-actions-text-input {{action.text.cssClass}}\\\"\\n    [placeholder]=\\\"action.text.placeholder\\\" [size]=\\\"action.text.size\\\" required libAutobotFocus/>\\n\\n  <button type=\\\"submit\\\" [ngClass]=\\\"{'botui-actions-buttons-button': !!action.text.button, 'botui-actions-text-submit': !action.text.button}\\\">\\n    <i *ngIf=\\\"action.text.button && action.text.button.icon\\\" class=\\\"botui-icon botui-action-button-icon fa {{'fa-' + action.text.button.icon}}\\\"></i>\\n    <span>{{(action.text.button && action.text.button.label) || 'Go'}}</span>\\n  </button> -->\\n\\n  <input type=\\\"text\\\" ref=\\\"input\\\" name=\\\"text-action-input\\\" [(ngModel)]=\\\"textValue\\\" class=\\\"botui-actions-text-input\\\" placeholder=\\\"Enter answer here...\\\"\\n    libAutobotFocus/>\\n  <button type=\\\"submit\\\">\\n    <span>'Go'</span>\\n  </button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractActionComponent } from '../abstract-action.component';\n\n@Component({\n  selector: 'lib-input-action',\n  templateUrl: './input-action.component.html',\n  styleUrls: ['./input-action.component.css']\n})\nexport class InputActionComponent extends AbstractActionComponent implements OnInit {\n  textValue = '';\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    this.resolver(this.textValue);\n  }\n\n  // handle_action_text() {\n  //   if (!this.action.text.value) return;\n  //   this._handleAction(this.action.text.value);\n  //   this._actionResolve({\n  //     type: 'text',\n  //     value: this.action.text.value\n  //   });\n  //   this.action.text.value = '';\n  // }\n}\n","module.exports = \"\"","module.exports = \"<!-- <form class=\\\"botui-actions-text {{action.cssClass}}\\\" (ngSubmit)=\\\"handle_action_text()\\\">\\n    <i *ngIf=\\\"action.text.icon\\\" class=\\\"botui-icon botui-action-text-icon fa {{'fa-' + action.text.icon}}\\\"></i>\\n    <input type=\\\"text\\\" ref=\\\"input\\\" name=\\\"button-text-action-input\\\"\\n    [type]=\\\"action.text.sub_type\\\"\\n    [(ngModel)]=\\\"action.text.value\\\"\\n    class=\\\"botui-actions-text-input {{action.text.cssClass}}\\\"\\n    [placeholder]=\\\"action.text.placeholder\\\"\\n    [size]=\\\"action.text.size\\\"\\n    required libAutobotFocus />\\n    <button type=\\\"submit\\\"\\n      [ngClass]=\\\"{'botui-actions-buttons-button': !!action.text.button, 'botui-actions-text-submit': !action.text.button}\\\">\\n      <i *ngIf=\\\"action.text.button && action.text.button.icon\\\" class=\\\"botui-icon botui-action-button-icon fa {{'fa-' + action.text.button.icon}}\\\"></i>\\n      <span>{{(action.text.button && action.text.button.label) || 'Go'}}</span>\\n    </button>\\n    <div class=\\\"botui-actions-buttons {{action.cssClass}}\\\">\\n      <button type=\\\"button\\\" *ngFor=\\\"let button of action.button.buttons\\\" class=\\\"botui-actions-buttons-button {{button.cssClass}}\\\"\\n        (click)=\\\"handle_action_button(button)\\\"\\n        autofocus>\\n        <i *ngIf=\\\"button.icon\\\" class=\\\"botui-icon botui-action-button-icon fa {{'fa-' + button.icon}}\\\"></i>\\n         {{button.text}}\\n      </button>\\n    </div>\\n  </form>   -->\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractActionComponent } from '../abstract-action.component';\n\n@Component({\n  selector: 'lib-input-button-action',\n  templateUrl: './input-button-action.component.html',\n  styleUrls: ['./input-button-action.component.css']\n})\nexport class InputButtonActionComponent extends AbstractActionComponent implements OnInit {\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {}\n}\n","module.exports = \"\"","module.exports = \"<!-- <form class=\\\"botui-actions-select {{action.cssClass}}\\\" (ngSubmit)=\\\"handle_action_select()\\\">\\n  <i *ngIf=\\\"action.select.icon\\\" class=\\\"botui-icon botui-action-select-icon fa {{'fa-' + action.select.icon}}\\\"></i>\\n   <v-select *ngIf=\\\"action.select.searchselect && !action.select.multipleselect\\\"  v-model=\\\"action.select.value\\\" :value=\\\"action.select.value\\\" :placeholder=\\\"action.select.placeholder\\\" class=\\\"botui-actions-text-searchselect\\\" :label=\\\"action.select.label\\\" :options=\\\"action.select.options\\\"></v-select>\\n    <v-select v-else-if=\\\"action.select.searchselect && action.select.multipleselect\\\" multiple  v-model=\\\"action.select.value\\\" :value=\\\"action.select.value\\\" :placeholder=\\\"action.select.placeholder\\\" class=\\\"botui-actions-text-searchselect\\\" :label=\\\"action.select.label\\\" :options=\\\"action.select.options\\\"></v-select>\\n  <select [(ngModel)]=\\\"action.select.value\\\" name=\\\"select-action-input\\\" class=\\\"botui-actions-text-select {{action.select.cssClass}}\\\"\\n    [size]=\\\"action.select.size\\\" required libAutobotFocus>\\n    <option *ngFor=\\\"let option of action.select.options\\\" [ngClass]=\\\"action.select.optionClass\\\" [value]=\\\"option.value\\\" [disabled]=\\\"(option.value == '')?true:false\\\"\\n      [selected]=\\\"(action.select.value == option.value) ? 'selected' : ''\\\">\\n      {{ option.text }}\\n    </option>\\n  </select>\\n  <button type=\\\"submit\\\" [ngClass]=\\\"{'botui-actions-buttons-button': !!action.select.button, 'botui-actions-select-submit': !action.select.button}\\\">\\n    <i *ngIf=\\\"action.select.button && action.select.button.icon\\\" class=\\\"botui-icon botui-action-button-icon fa {{'fa-' + action.select.button.icon}}\\\"></i>\\n    <span>{{(action.select.button && action.select.button.label) || 'Ok'}}</span>\\n  </button>\\n</form> -->\"","import { Component, OnInit } from '@angular/core';\nimport { AbstractActionComponent } from '../abstract-action.component';\n\n@Component({\n  selector: 'autobot-select-action',\n  templateUrl: './select-action.component.html',\n  styleUrls: ['./select-action.component.css']\n})\nexport class SelectActionComponent extends AbstractActionComponent implements OnInit {\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {}\n\n  // handle_action_select() {\n  //   if (this.action.select.searchselect && !this.action.select.multipleselect) {\n  //     if (!this.action.select.value.value) return;\n  //     this._handleAction(this.action.select.value[this.action.select.label]);\n  //     this._actionResolve({\n  //       type: 'text',\n  //       value: this.action.select.value.value,\n  //       text: this.action.select.value.text,\n  //       obj: this.action.select.value\n  //     });\n  //   }\n  //   if (this.action.select.searchselect && this.action.select.multipleselect) {\n  //     if (!this.action.select.value) return;\n  //     var values = new Array();\n  //     var labels = new Array();\n  //     for (var i = 0; i < this.action.select.value.length; i++) {\n  //       values.push(this.action.select.value[i].value);\n  //       labels.push(this.action.select.value[i][this.action.select.label]);\n  //     }\n  //     this._handleAction(labels.join(', '));\n  //     this._actionResolve({\n  //       type: 'text',\n  //       value: values.join(', '),\n  //       text: labels.join(', '),\n  //       obj: this.action.select.value\n  //     });\n  //   }\n  //   else {\n  //     if (!this.action.select.value) return;\n  //     for (var i = 0; i < this.action.select.options.length; i++) { // Find select title\n  //       if (this.action.select.options[i].value == this.action.select.value) {\n  //         this._handleAction(this.action.select.options[i].text);\n  //         this._actionResolve({\n  //           type: 'text',\n  //           value: this.action.select.value,\n  //           text: this.action.select.options[i].text\n  //         });\n  //       }\n  //     }\n  //   }\n  // }\n}\n","module.exports = \"<div class=\\\"botui botui-container\\\">\\n\\n  <!-- {{ isFrozen$ | async | json}} {{ latestMessage$ | async | json}} -->\\n  <div class=\\\"botui-messages-container\\\">\\n    <autobot-message *ngFor=\\\"let msg of messages$ | async\\\" [msg]=\\\"msg\\\"></autobot-message>\\n  </div>\\n  <div class=\\\"botui-actions-container\\\">\\n    <lib-action *ngIf=\\\"(action$ | async) && (action$ | async).autobotOpts.show\\\" [action]=\\\"action$\\\" [resolver]=\\\"getCurrentActionResolver()\\\"></lib-action>\\n  </div>\\n</div>\"","import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Message, Action } from '../../models';\nimport { AutobotManagerFactory } from '../../core/autobot-manager.factory.service';\nimport { AutobotManager } from '../../core/autobot-manager';\nimport {\n  AutobotState,\n  selectBotById_action,\n  selectBotById_messagesSortedByDate,\n  isBotFrozen,\n  selectBotById_messagesLatest\n} from '../../store/reducers';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'autobot-chat',\n  templateUrl: './autobot-chat.component.html',\n  styles: []\n})\nexport class AutobotChatComponent implements OnInit, OnChanges {\n  @Input('botId') botId: string;\n\n  messages = [];\n  _actionResolve: (any) => any; // Resolver function definition\n\n  @Input() opts: any;\n\n  private botManager: AutobotManager;\n  messages$: Observable<Message[]> = undefined;\n  action$: Observable<Action> = undefined;\n\n  latestMessage$;\n  isFrozen$;\n\n  constructor(\n    private botManagerFactory: AutobotManagerFactory,\n    private store: Store<AutobotState>\n  ) {}\n\n  ngOnChanges() {\n    if (this.botId !== '' && this.botId !== undefined) {\n      this.botManager = this.botManagerFactory.getManager(this.botId);\n      this.messages$ = this.store.select(selectBotById_messagesSortedByDate(this.botId));\n      this.action$ = this.store.select(selectBotById_action(this.botId));\n      this.isFrozen$ = this.store.select(isBotFrozen(this.botId));\n      this.latestMessage$ = this.store.select(selectBotById_messagesLatest(this.botId));\n    }\n  }\n\n  ngOnInit() {}\n\n  getCurrentActionResolver() {\n    return this.botManager._getCurrentActionResolver();\n  }\n}\n","module.exports = \"\"","module.exports = \"<iframe [src]=\\\"msg.content\\\" frameborder=\\\"0\\\"></iframe>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Message } from '../../../models';\n\n@Component({\n  selector: 'lib-embed-message',\n  templateUrl: './embed-message.component.html',\n  styleUrls: ['./embed-message.component.css']\n})\nexport class EmbedMessageComponent implements OnInit {\n\n  @Input() msg: Message;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<!-- <div class=\\\"botui-message {{msg.cssClass}}\\\" libAutobotScroll>\\n  <div *ngIf=\\\"msg.loading\\\" class=\\\"botui-message-content loading\\\" [class.human]=\\\"msg.human\\\" [@slideFadeAnimation]>\\n    <i class=\\\"dot\\\"></i>\\n    <i class=\\\"dot\\\"></i>\\n    <i class=\\\"dot\\\"></i>\\n  </div>\\n  <ng-container *ngIf=\\\"!msg.loading\\\">\\n    <div *ngIf=\\\"msg.visible\\\" class=\\\"botui-message-content {{msg.type}}\\\" [class.human]=\\\"msg.human\\\" [@slideFadeAnimation]>\\n      <ng-container [ngSwitch]=\\\"msg.type\\\">\\n        <lib-text-message *ngSwitchCase=\\\"'text'\\\" [msg]=\\\"msg\\\"></lib-text-message>\\n        <lib-embed-message *ngSwitchCase=\\\"'embed'\\\" [msg]=\\\"msg\\\"></lib-embed-message>\\n        <span *ngSwitchDefault>Unknown Message Type</span>\\n      </ng-container>\\n\\n    </div>\\n  </ng-container>\\n</div> -->\\n\\n\\n<div class=\\\"botui-message\\\" libAutobotScroll>\\n  <div class=\\\"botui-message-content {{msg.type}}\\\" [class.human]=\\\"msg.human\\\" [@slideFadeAnimation]>\\n    <ng-container #container>\\n    </ng-container>\\n  </div>\\n</div>\\n\\n<ng-template #messageLoading>\\n  <div class=\\\"botui-message-content loading\\\" [class.human]=\\\"msg.human\\\" [@slideFadeAnimation]>\\n    <i class=\\\"dot\\\"></i>\\n    <i class=\\\"dot\\\"></i>\\n    <i class=\\\"dot\\\"></i>\\n  </div>\\n</ng-template>\\n\\n<ng-template #unknownMessage>\\n  <span>Unknown Message Type</span>\\n</ng-template>\"","import { Component, OnInit, Input, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Message } from '../../models';\nimport { AutobotMessageFactory } from '../../core/autobot-message-factory.service';\nimport { getSlideFadeAnim } from '../../angular-autobot-animations';\n\n@Component({\n  selector: 'autobot-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.css'],\n  animations: [getSlideFadeAnim()]\n})\nexport class MessageComponent implements OnInit {\n  @ViewChild('messageLoading') messageLoadingTpl;\n  @ViewChild('unknownMessage') unknownMessageTpl;\n  @ViewChild('container', { read: ViewContainerRef })\n  container: ViewContainerRef;\n\n  @Input() msg: Message;\n\n  constructor(private mesgFactory: AutobotMessageFactory) {}\n\n  ngOnInit() {\n    this.loadMessageComponent();\n  }\n\n  loadMessageComponent() {\n    if (this.msg.loading) {\n      // If message is in loading state, display the loading template\n      this.container.createEmbeddedView(this.messageLoadingTpl);\n    } else {\n      // If message is done loading, prepare new message component for projection.\n      const resolvedComponentFactory = this.mesgFactory.getComponentFactoryForMessageType(\n        this.msg.type\n      );\n      if (resolvedComponentFactory !== undefined) {\n        // If message factory is found, create an instance and add input properties\n        const compRef = this.container.createComponent(resolvedComponentFactory);\n        (<any>compRef.instance).msg = this.msg;\n      } else {\n        // If message factory is not found, display 'Unknown Message'\n        this.container.createEmbeddedView(this.unknownMessageTpl);\n      }\n    }\n  }\n}\n","module.exports = \"\"","module.exports = \"<span [autobotMarkdown]=\\\"msg.content\\\"></span>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Message } from '../../../models';\n\n@Component({\n  selector: 'autobot-text-message',\n  templateUrl: './text-message.component.html',\n  styleUrls: ['./text-message.component.css']\n})\nexport class TextMessageComponent implements OnInit {\n  @Input() msg: Message;\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { Injectable } from '@angular/core';\nimport { AutobotManager } from '../core/autobot-manager';\nimport { AutobotMessageFactory } from '../core/autobot-message-factory.service';\nimport { AutobotState, CREATE_BOT } from '../store/reducers';\nimport { Store } from '@ngrx/store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutobotManagerFactory {\n  private managers: any;\n\n  constructor(\n    private autobotMessageFactory: AutobotMessageFactory,\n    private store: Store<AutobotState>\n  ) {\n    this.managers = {};\n  }\n\n  getManager(botId: string) {\n    if (!this.managers.hasOwnProperty(botId) || this.managers[botId] === undefined) {\n      this.store.dispatch({ type: CREATE_BOT, payload: { botId: botId } });\n      this.managers[botId] = this.createManager(botId);\n    }\n    return this.managers[botId];\n  }\n\n  createManager(botId) {\n    return new AutobotManager(botId, this.autobotMessageFactory, this.store);\n  }\n}\n","import { Message, Action } from '../models';\nimport { AutobotMessageFactory } from './autobot-message-factory.service';\nimport { Store } from '@ngrx/store';\nimport {\n  AutobotState,\n  ADD_MESSAGE,\n  SET_ACTION,\n  isBotFrozen,\n  selectBotById_messagesList,\n  selectBotById_action,\n  UPDATE_MESSAGE_CONTENT,\n  UPDATE_MESSAGE_LOADED\n} from '../store/reducers';\n\nexport class AutobotManager {\n  private _actionPromiseResolver;\n  private botFrozen;\n  constructor(\n    private botId: string,\n    private autobotMessageFactory: AutobotMessageFactory,\n    private store: Store<AutobotState>\n  ) {\n    this.store.select(isBotFrozen(this.botId)).subscribe(frozen => {\n      this.botFrozen = frozen;\n    });\n  }\n\n  getId(): string {\n    return this.botId;\n  }\n\n  /**\n   * State Selectors\n   */\n\n  getMessages() {\n    return this.store.select(selectBotById_messagesList);\n  }\n\n  getAction() {\n    return this.store.select(selectBotById_action);\n  }\n\n  getState() {\n    return this.store;\n  }\n\n  /**\n   * Store Action Helpers\n   */\n\n  _addMessage(message: Message) {\n    if (this.autobotMessageFactory.verifyMessageObj(message) && !this.botFrozen) {\n      this.store.dispatch({\n        type: ADD_MESSAGE,\n        payload: { botId: this.botId, message: message }\n      });\n      return message.id;\n    }\n  }\n\n  _getCurrentActionResolver() {\n    return this._actionPromiseResolver;\n  }\n\n  _setAction(action: Action) {\n    this.store.dispatch({\n      type: SET_ACTION,\n      payload: { botId: this.botId, action: action }\n    });\n    const actionP = new Promise((res, rej) => {\n      this._actionPromiseResolver = res;\n    });\n    actionP.then(this._unsetAction.bind(this));\n    return actionP;\n  }\n\n  _unsetAction() {\n    this.store.dispatch({\n      type: SET_ACTION,\n      payload: { botId: this.botId, action: undefined }\n    });\n    this._actionPromiseResolver = undefined;\n  }\n\n  addHumanMessage(message: string | Message) {\n    if (typeof message === 'string') {\n      message = <Message>this.autobotMessageFactory.createTextMessage(message);\n    }\n    message.human = true;\n    return this._addMessage(message);\n  }\n\n  addBotMessage(message: string | Message) {\n    if (typeof message === 'string') {\n      message = <Message>this.autobotMessageFactory.createTextMessage(message);\n    }\n    message.human = false;\n    return this._addMessage(message);\n  }\n\n  addAction(actionName: string, opts: any = {}, autobotOpts: any = {}) {\n    const action: Action = {\n      type: actionName,\n      actionData: opts,\n      autobotOpts: autobotOpts,\n      created_date: new Date()\n    };\n    const actionResolvePromise = this._setAction(action);\n    this.processActionAutobotOptions(action);\n    return actionResolvePromise;\n  }\n\n  processActionAutobotOptions(action: Action) {\n    if (action.autobotOpts.delay !== undefined) {\n      setTimeout(() => {\n        action.autobotOpts.show = true;\n      }, action.autobotOpts.delay);\n    }\n  }\n\n  updateMessageLoaded(botId, messageId) {\n    this.store.dispatch({\n      type: UPDATE_MESSAGE_LOADED,\n      payload: { botId: botId, messageId: messageId }\n    });\n  }\n\n  updateMessageContent(botId, messageId, content) {\n    this.store.dispatch({\n      type: UPDATE_MESSAGE_CONTENT,\n      payload: { botId: botId, messageId: messageId, content: content }\n    });\n  }\n}\n","import { Message } from '../models';\nimport { Injectable, ComponentFactoryResolver } from '@angular/core';\nimport * as uuidv1 from 'uuid/v1';\nimport * as _ from 'lodash';\n\nexport let InbuiltMessageTypes = {\n  TEXT: 'text',\n  EMBED: 'embed'\n};\n\n/**\n * Singleton Service to cater to all message creation and validation needs of the library.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutobotMessageFactory {\n  private customMessageTypes = [];\n  private messageComponentRegistry = {};\n\n  constructor(private resolver: ComponentFactoryResolver) {}\n\n  getRegisteredMessageTypes() {\n    return Object.values(InbuiltMessageTypes).concat(this.customMessageTypes);\n  }\n\n  verifyMessageObj(message: Message) {\n    if (\n      message.id === undefined ||\n      typeof message.loading !== 'boolean' ||\n      typeof message.visible !== 'boolean' ||\n      (message.content === undefined || message.content === null) ||\n      typeof message.visible !== 'boolean'\n    ) {\n      console.error('Message Verification Failed.', message);\n      return false;\n    }\n    return true;\n  }\n\n  createTextMessage(messageStr): Message {\n    return <Message>{\n      id: uuidv1(),\n      type: InbuiltMessageTypes.TEXT,\n      content: messageStr,\n      loading: false,\n      visible: true,\n      human: false,\n      created_date: new Date()\n    };\n  }\n\n  registerComponent(messageType: string, component: any) {\n    if (messageType) {\n      const found = _.find(this.customMessageTypes, messageType);\n      if (found) {\n        throw Error('Component name already registered.');\n      }\n      this.customMessageTypes.push(messageType);\n      this.messageComponentRegistry[messageType] = component;\n    }\n  }\n\n  getComponentClassForMessageType(messageType: string) {\n    return this.messageComponentRegistry[messageType];\n  }\n\n  getComponentFactoryForMessageType(messageType: string) {\n    const component = this.messageComponentRegistry[messageType];\n    if (component) {\n      return this.resolver.resolveComponentFactory(component);\n    }\n  }\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libAutobotFocus]'\n})\nexport class AutobotFocusDirective {\n\n  constructor(el: ElementRef) {\n    el.nativeElement.focus();\n  }\n\n}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[autobotMarkdown]'\n})\nexport class AutobotMarkdownDirective implements OnInit {\n  private _markDownRegex = {\n    icon: /!\\(([^\\)]+)\\)/gim, // !(icon)\n    image: /!\\[(.*?)\\]\\((.*?)\\)/gim, // ![aleternate text](src)\n    link: /\\[([^\\[]+)\\]\\(([^\\)]+)\\)(\\^?)/gim // [text](link) ^ can be added at end to set the target as 'blank'\n  };\n\n  // Bind with an alias\n  @Input('autobotMarkdown') autobotMarkdown: string;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    this.el.nativeElement.innerHTML = this._parseMarkDown(this.autobotMarkdown);\n  }\n\n  _parseMarkDown(text) {\n    return text\n      .replace(\n        this._markDownRegex.image,\n        `<img class='botui-message-content-image' src='$2' alt='$1' />`\n      )\n      .replace(\n        this._markDownRegex.icon,\n        `<i class='botui-icon botui-message-content-icon fa fa-$1'></i>`\n      )\n      .replace(this._markDownRegex.link, this._linkReplacer);\n  }\n\n  _linkReplacer(match, $1, $2, $3) {\n    const _target = $3 ? 'blank' : ''; // check if '^' sign is present with link syntax\n    return `<a class='botui-message-content-link' target='${_target}' href='${$2}'>${$1}</a>`;\n  }\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libAutobotScroll]'\n})\nexport class AutobotScrollDirective {\n  constructor(el: ElementRef) {\n    // _container.scrollTop = _container.scrollHeight;\n  }\n}\n","import { createSelector } from '@ngrx/store';\n// import { Action } from '@ngrx/store';\nimport { Message } from '../models';\nimport * as AutobotModels from '../models';\n\n/*******************************\n * Action Constants\n ********************************/\n\nexport const CREATE_BOT = 'CREATE_BOT';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const SET_ACTION = 'SET_ACTION';\nexport const UPDATE_MESSAGE_LOADED = 'UPDATE_MESSAGE_LOADED';\nexport const UPDATE_MESSAGE_CONTENT = 'UPDATE_MESSAGE_CONTENT';\n\n/*******************************\n * State & Initial State\n ********************************/\nexport interface AutobotBotState {\n  action: any;\n  messages: {\n    [key: string]: Message;\n  };\n}\nexport interface AutobotState {\n  bots: {\n    [key: string]: AutobotBotState;\n  };\n  globalSettings: any;\n}\n\nexport const autobotInitialState: AutobotState = {\n  bots: {},\n  globalSettings: {\n    icansee: true\n  }\n};\n\n/*******************************\n * Reducer\n ********************************/\n\nexport function autobotStateReducer(\n  state: AutobotState = autobotInitialState,\n  action: any\n): AutobotState {\n  switch (action.type) {\n    case CREATE_BOT:\n      return {\n        ...state,\n        bots: {\n          ...state.bots,\n          [(<any>action).payload.botId]: { action: undefined, messages: {} }\n        }\n      };\n\n    case ADD_MESSAGE:\n      if (state.bots[action.payload.botId] === undefined) {\n        return state;\n      }\n      return {\n        ...state,\n        bots: {\n          ...state.bots,\n          [action.payload.botId]: {\n            ...state.bots[action.payload.botId],\n            messages: {\n              ...state.bots[action.payload.botId].messages,\n              [action.payload.message.id]: action.payload.message\n            }\n          }\n        }\n      };\n\n    case UPDATE_MESSAGE_LOADED:\n      if (\n        state.bots[action.payload.botId] &&\n        state.bots[action.payload.botId].messages[action.payload.messageId]\n      ) {\n        const currentFreeze =\n          state.bots[action.payload.botId].messages[action.payload.messageId].freeze;\n        const currentFreezeUntilLoad =\n          state.bots[action.payload.botId].messages[action.payload.messageId].freezeUntilLoad;\n        return {\n          ...state,\n          bots: {\n            ...state.bots,\n            [action.payload.botId]: {\n              ...state.bots[action.payload.botId],\n              messages: {\n                ...state.bots[action.payload.botId].messages,\n                [action.payload.messageId]: {\n                  ...state.bots[action.payload.botId].messages[action.payload.messageId],\n                  freeze: currentFreezeUntilLoad ? false : currentFreeze,\n                  loading: false\n                }\n              }\n            }\n          }\n        };\n      } else {\n        return state;\n      }\n\n    case UPDATE_MESSAGE_CONTENT:\n      if (\n        state.bots[action.payload.botId] &&\n        state.bots[action.payload.botId].messages[action.payload.messageId]\n      ) {\n        return {\n          ...state,\n          bots: {\n            ...state.bots,\n            [action.payload.botId]: {\n              ...state.bots[action.payload.botId],\n              messages: {\n                ...state.bots[action.payload.botId].messages,\n                [action.payload.messageId]: {\n                  ...state.bots[action.payload.botId].messages[action.payload.messageId],\n                  content: action.payload.content\n                }\n              }\n            }\n          }\n        };\n      } else {\n        return state;\n      }\n\n    case SET_ACTION:\n      if (state.bots[action.payload.botId] === undefined) {\n        return state;\n      }\n      return {\n        ...state,\n        bots: {\n          ...state.bots,\n          [action.payload.botId]: {\n            ...state.bots[action.payload.botId],\n            action: action.payload.action\n          }\n        }\n      };\n    default:\n      return state;\n  }\n}\n\n/*******************************\n * Selectors\n ********************************/\n\nexport const selectAutobotState = (state: any) => state.autobot;\n\nexport const selectBotById = botId =>\n  createSelector(selectAutobotState, (state: AutobotState) => state.bots[botId]);\n\nexport const selectBotById_messages = botId =>\n  createSelector(selectBotById(botId), (botState: AutobotBotState) => botState.messages);\n\nexport const selectBotById_messagesList = botId =>\n  createSelector(selectBotById_messages(botId), messages =>\n    Object.keys(messages).map(key => messages[key])\n  );\n\nexport const selectBotById_action = botId =>\n  createSelector(selectBotById(botId), (botState: AutobotBotState) => botState.action);\n\nexport const selectBotById_messagesSortedByDate = botId =>\n  createSelector(selectBotById_messagesList(botId), messages => {\n    return messages.sort((a, b) => <any>a.created_date - <any>b.created_date);\n  });\n\nexport const selectBotById_messagesLatest = botId =>\n  createSelector(selectBotById_messagesList(botId), sortedMessages => sortedMessages.slice(-1)[0]);\n\nexport const selectGlobalSettings = createSelector(selectAutobotState, (state: AutobotState) => {\n  console.log('in selectglobalsettings', state);\n  return state.globalSettings;\n});\n\nexport const isBotFrozen = botId =>\n  createSelector(\n    selectGlobalSettings,\n    selectBotById_action(botId),\n    selectBotById_messagesLatest(botId),\n    (settings, action: AutobotModels.Action, latestMessage: Message) => {\n      // console.log(botId, settings, action, latestMessage);\n      console.log(\n        botId,\n        settings,\n        (<any>(action || {})).autobotOpts,\n        (<any>(latestMessage || {})).freeze\n      );\n\n      return (\n        (<any>(settings || {})).freeze ||\n        (<any>(<any>(action || {})).autobotOpts || {}).freeze ||\n        (<any>(latestMessage || {})).freeze ||\n        false\n      );\n    }\n  );\n","/*\n * Public API Surface of angular-autobot\n */\n\nexport * from './lib/angular-autobot.service';\nexport * from './lib/components/chatbot/autobot-chat.component';\nexport * from './lib/angular-autobot.module';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".chatbox {\\n  width: 30%;\\n  float: left;\\n  min-height: 200px;\\n  margin-left: 20px;\\n  border: thin solid #eee;\\n}\\n\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h1>Welcome to Autobot!</h1>\\n</div>\\n<div class=\\\"chatbox\\\">\\n  <autobot-chat botId='bot1'></autobot-chat>\\n</div>\\n<div class=\\\"chatbox\\\">\\n  <autobot-chat botId='bot2'></autobot-chat>\\n</div>\\n<div class=\\\"chatbox\\\">\\n  <autobot-chat botId='bot3'></autobot-chat>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AngularAutobotService } from 'angular-autobot';\nimport * as _ from 'lodash';\nimport * as uuidv1 from 'uuid/v1';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'app';\n\n  constructor(private botService: AngularAutobotService) {}\n\n  ngOnInit() {\n    const bots = ['bot1', 'bot2', 'bot3'];\n    const messages = [\n      'Hello there',\n      'Im just a bot',\n      'I passed the turing test obv!',\n      'Am i a bot or a human?',\n      \"You'll never know\"\n    ];\n\n    setInterval(() => {\n      const randomBot = _.sample(bots);\n      const randomMessage = _.sample(messages);\n\n      const isHuman = Math.random() > 0.5;\n      isHuman\n        ? this.botService.bot(randomBot).addHumanMessage({\n            id: uuidv1(),\n            type: 'text',\n            visible: true,\n            loading: false,\n            content: randomMessage,\n            human: false,\n            created_date: new Date()\n          })\n        : this.botService.bot(randomBot).addBotMessage({\n            id: uuidv1(),\n            type: 'text',\n            visible: true,\n            loading: false,\n            content: randomMessage,\n            human: false,\n            created_date: new Date()\n          });\n    }, 500);\n\n    this.askAnyQuestion('bot1', 10000);\n    this.askAnyQuestion('bot2', 10000);\n    this.askAnyQuestion('bot3', 10000);\n  }\n\n  askAnyQuestion(botId, timeout) {\n    return _.sample([this.askButtonQuestion.bind(this), this.askTextInputQuestion.bind(this)])(\n      botId,\n      timeout\n    );\n  }\n\n  askTextInputQuestion(botId, timeout) {\n    setTimeout(() => {\n      this.botService\n        .bot(botId)\n        .addAction('text', {}, { show: true, freeze: true })\n        .then((res: any) => {\n          const asyncMesgId = this.botService.bot(botId).addHumanMessage({\n            id: uuidv1(),\n            type: 'text',\n            visible: true,\n            loading: true,\n            content: res,\n            human: false,\n            created_date: new Date(),\n            freeze: true,\n            freezeUntilLoad: true\n          });\n          console.log(asyncMesgId);\n          this.doneLoading(botId, asyncMesgId, 1000);\n          this.updateContent(botId, asyncMesgId, `Hahahaha! I'm gone!`, 2500);\n        });\n    }, timeout);\n  }\n\n  askButtonQuestion(botId, timeout) {\n    const buttonItems = [\n      {\n        text: 'Good',\n        value: 'good'\n      },\n      {\n        text: 'Really Good',\n        value: 'really_good'\n      }\n    ];\n\n    setTimeout(() => {\n      this.botService\n        .bot(botId)\n        .addAction('button', { items: buttonItems }, { delay: 100, freeze: true })\n        .then((res: any) => {\n          this.botService.bot(botId).addHumanMessage(res.value);\n        });\n    }, timeout);\n  }\n\n  doneLoading(botId, asyncMesgId, timeout) {\n    setTimeout(() => {\n      this.botService.bot(botId).updateMessageLoaded(botId, asyncMesgId);\n    }, timeout);\n  }\n\n  updateContent(botId, asyncMesgId, content, timeout) {\n    setTimeout(() => {\n      this.botService.bot(botId).updateMessageContent(botId, asyncMesgId, content);\n    }, timeout);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {AngularAutobotModule} from 'angular-autobot';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AngularAutobotModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}